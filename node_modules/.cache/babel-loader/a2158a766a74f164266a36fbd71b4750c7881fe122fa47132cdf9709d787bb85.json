{"ast":null,"code":"import { db } from \"../firebaseConfig\";\nimport { collection, addDoc, setDoc, doc, getDoc, getDocs } from \"firebase/firestore\";\nexport const addData = async (collectionName, data) => {\n  try {\n    console.log(\"Adding data to Firestore:\", data);\n    const docRef = await addDoc(collection(db, collectionName), data);\n    console.log(\"Document ID:\", docRef.id);\n    return {\n      success: true,\n      id: docRef.id\n    };\n  } catch (error) {\n    console.error(\"Firestore error:\", error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const setData = async (collectionName, docId, data) => {\n  try {\n    await setDoc(doc(db, collectionName, docId), data);\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const getData = async (collectionName, docId) => {\n  try {\n    const docRef = doc(db, collectionName, docId);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) return {\n      success: true,\n      data: docSnap.data()\n    };else return {\n      success: false,\n      error: \"No such document!\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const getAllData = async collectionName => {\n  try {\n    const querySnapshot = await getDocs(collection(db, collectionName));\n    const result = [];\n    querySnapshot.forEach(doc => {\n      result.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return {\n      success: true,\n      data: result\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Check if user exists in database by email\nexport const checkUserExists = async email => {\n  try {\n    console.log('🔍 Firestore checkUserExists called with email:', email);\n    console.log('🔍 Firestore db object:', db);\n\n    // Try to get all documents from users collection\n    const usersCollection = collection(db, 'users');\n    console.log('🔍 Users collection reference:', usersCollection);\n    const querySnapshot = await getDocs(usersCollection);\n    console.log('🔍 Query snapshot size:', querySnapshot.size);\n    console.log('🔍 Query snapshot empty:', querySnapshot.empty);\n    const users = [];\n    querySnapshot.forEach(doc => {\n      const userData = {\n        id: doc.id,\n        ...doc.data()\n      };\n      console.log('🔍 Found user in database:', userData);\n      console.log('🔍 User email from DB:', userData.email);\n      console.log('🔍 Searching for email:', email);\n      console.log('🔍 Email match:', userData.email === email);\n      users.push(userData);\n    });\n    console.log('🔍 All users in database:', users);\n    console.log('🔍 Total users found:', users.length);\n\n    // Find user by email (case-insensitive)\n    const user = users.find(user => user.email && user.email.toLowerCase() === email.toLowerCase());\n    console.log('🔍 User found by email:', user);\n    if (user) {\n      console.log('✅ User found in database!');\n      return {\n        success: true,\n        exists: true,\n        user: user\n      };\n    } else {\n      console.log('❌ User not found in database');\n      return {\n        success: true,\n        exists: false\n      };\n    }\n  } catch (error) {\n    console.error(\"❌ Error checking user existence:\", error);\n    console.error(\"❌ Error details:\", {\n      code: error.code,\n      message: error.message,\n      stack: error.stack\n    });\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Test function to check Firestore connection\nexport const testFirestoreConnection = async () => {\n  try {\n    console.log('Testing Firestore connection...');\n    const testData = {\n      test: true,\n      timestamp: new Date().toISOString()\n    };\n    const docRef = await addDoc(collection(db, 'test'), testData);\n    console.log('Test document created with ID:', docRef.id);\n    return {\n      success: true,\n      docId: docRef.id\n    };\n  } catch (error) {\n    console.error('Firestore connection test failed:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Function to verify user data in database\nexport const verifyUserData = async email => {\n  try {\n    console.log('🔍 Verifying user data for email:', email);\n    const querySnapshot = await getDocs(collection(db, 'users'));\n    console.log('🔍 Total documents in users collection:', querySnapshot.size);\n    const users = [];\n    querySnapshot.forEach(doc => {\n      const userData = {\n        id: doc.id,\n        ...doc.data()\n      };\n      users.push(userData);\n      console.log('🔍 User document ID:', doc.id);\n      console.log('🔍 User data:', userData);\n      console.log('🔍 User email field:', userData.email);\n      console.log('🔍 User email type:', typeof userData.email);\n      console.log('🔍 User email length:', userData.email ? userData.email.length : 'null');\n    });\n\n    // Find user by email\n    const user = users.find(user => user.email && user.email.toLowerCase() === email.toLowerCase());\n    if (user) {\n      console.log('✅ User data verified:', user);\n      return {\n        success: true,\n        user: user\n      };\n    } else {\n      console.log('❌ User data not found');\n      console.log('❌ Available emails:', users.map(u => u.email));\n      return {\n        success: false,\n        error: 'User not found'\n      };\n    }\n  } catch (error) {\n    console.error('❌ Error verifying user data:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["db","collection","addDoc","setDoc","doc","getDoc","getDocs","addData","collectionName","data","console","log","docRef","id","success","error","message","setData","docId","getData","docSnap","exists","getAllData","querySnapshot","result","forEach","push","checkUserExists","email","usersCollection","size","empty","users","userData","length","user","find","toLowerCase","code","stack","testFirestoreConnection","testData","test","timestamp","Date","toISOString","verifyUserData","map","u"],"sources":["D:/CollegeFolder_B-TECH/Incuverse/src/pages/firestore.js"],"sourcesContent":["import { db } from \"../firebaseConfig\";\r\nimport { collection, addDoc, setDoc, doc, getDoc, getDocs } from \"firebase/firestore\";\r\n\r\nexport const addData = async (collectionName, data) => {\r\n    try {\r\n        console.log(\"Adding data to Firestore:\", data);\r\n        const docRef = await addDoc(collection(db, collectionName), data);\r\n        console.log(\"Document ID:\", docRef.id);\r\n        return { success: true, id: docRef.id };\r\n    } catch (error) {\r\n        console.error(\"Firestore error:\", error);\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\nexport const setData = async (collectionName, docId, data) => {\r\n    try {\r\n        await setDoc(doc(db, collectionName, docId), data);\r\n        return { success: true };\r\n    } catch (error) {\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\nexport const getData = async (collectionName, docId) => {\r\n    try {\r\n        const docRef = doc(db, collectionName, docId);\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) return { success: true, data: docSnap.data() };\r\n        else return { success: false, error: \"No such document!\" };\r\n    } catch (error) {\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\nexport const getAllData = async (collectionName) => {\r\n    try {\r\n        const querySnapshot = await getDocs(collection(db, collectionName));\r\n        const result = [];\r\n        querySnapshot.forEach((doc) => {\r\n            result.push({ id: doc.id, ...doc.data() });\r\n        });\r\n        return { success: true, data: result };\r\n    } catch (error) {\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\n// Check if user exists in database by email\r\nexport const checkUserExists = async (email) => {\r\n    try {\r\n        console.log('🔍 Firestore checkUserExists called with email:', email);\r\n        console.log('🔍 Firestore db object:', db);\r\n\r\n        // Try to get all documents from users collection\r\n        const usersCollection = collection(db, 'users');\r\n        console.log('🔍 Users collection reference:', usersCollection);\r\n\r\n        const querySnapshot = await getDocs(usersCollection);\r\n        console.log('🔍 Query snapshot size:', querySnapshot.size);\r\n        console.log('🔍 Query snapshot empty:', querySnapshot.empty);\r\n\r\n        const users = [];\r\n        querySnapshot.forEach((doc) => {\r\n            const userData = { id: doc.id, ...doc.data() };\r\n            console.log('🔍 Found user in database:', userData);\r\n            console.log('🔍 User email from DB:', userData.email);\r\n            console.log('🔍 Searching for email:', email);\r\n            console.log('🔍 Email match:', userData.email === email);\r\n            users.push(userData);\r\n        });\r\n\r\n        console.log('🔍 All users in database:', users);\r\n        console.log('🔍 Total users found:', users.length);\r\n\r\n        // Find user by email (case-insensitive)\r\n        const user = users.find(user =>\r\n            user.email && user.email.toLowerCase() === email.toLowerCase()\r\n        );\r\n        console.log('🔍 User found by email:', user);\r\n\r\n        if (user) {\r\n            console.log('✅ User found in database!');\r\n            return { success: true, exists: true, user: user };\r\n        } else {\r\n            console.log('❌ User not found in database');\r\n            return { success: true, exists: false };\r\n        }\r\n    } catch (error) {\r\n        console.error(\"❌ Error checking user existence:\", error);\r\n        console.error(\"❌ Error details:\", {\r\n            code: error.code,\r\n            message: error.message,\r\n            stack: error.stack\r\n        });\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\n// Test function to check Firestore connection\r\nexport const testFirestoreConnection = async () => {\r\n    try {\r\n        console.log('Testing Firestore connection...');\r\n        const testData = {\r\n            test: true,\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        const docRef = await addDoc(collection(db, 'test'), testData);\r\n        console.log('Test document created with ID:', docRef.id);\r\n\r\n        return { success: true, docId: docRef.id };\r\n    } catch (error) {\r\n        console.error('Firestore connection test failed:', error);\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\n// Function to verify user data in database\r\nexport const verifyUserData = async (email) => {\r\n  try {\r\n    console.log('🔍 Verifying user data for email:', email);\r\n    \r\n    const querySnapshot = await getDocs(collection(db, 'users'));\r\n    console.log('🔍 Total documents in users collection:', querySnapshot.size);\r\n    \r\n    const users = [];\r\n    querySnapshot.forEach((doc) => {\r\n      const userData = { id: doc.id, ...doc.data() };\r\n      users.push(userData);\r\n      console.log('🔍 User document ID:', doc.id);\r\n      console.log('🔍 User data:', userData);\r\n      console.log('🔍 User email field:', userData.email);\r\n      console.log('🔍 User email type:', typeof userData.email);\r\n      console.log('🔍 User email length:', userData.email ? userData.email.length : 'null');\r\n    });\r\n    \r\n    // Find user by email\r\n    const user = users.find(user => \r\n      user.email && user.email.toLowerCase() === email.toLowerCase()\r\n    );\r\n    \r\n    if (user) {\r\n      console.log('✅ User data verified:', user);\r\n      return { success: true, user: user };\r\n    } else {\r\n      console.log('❌ User data not found');\r\n      console.log('❌ Available emails:', users.map(u => u.email));\r\n      return { success: false, error: 'User not found' };\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ Error verifying user data:', error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}