{"ast":null,"code":"import { db } from \"../firebaseConfig\";\nimport { collection, addDoc, setDoc, doc, getDoc, getDocs } from \"firebase/firestore\";\nexport const addData = async (collectionName, data) => {\n  try {\n    console.log(\"Adding data to Firestore:\", data);\n    const docRef = await addDoc(collection(db, collectionName), data);\n    console.log(\"Document ID:\", docRef.id);\n    return {\n      success: true,\n      id: docRef.id\n    };\n  } catch (error) {\n    console.error(\"Firestore error:\", error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const setData = async (collectionName, docId, data) => {\n  try {\n    await setDoc(doc(db, collectionName, docId), data);\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const getData = async (collectionName, docId) => {\n  try {\n    const docRef = doc(db, collectionName, docId);\n    const docSnap = await getDoc(docRef);\n    if (docSnap.exists()) return {\n      success: true,\n      data: docSnap.data()\n    };else return {\n      success: false,\n      error: \"No such document!\"\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\nexport const getAllData = async collectionName => {\n  try {\n    const querySnapshot = await getDocs(collection(db, collectionName));\n    const result = [];\n    querySnapshot.forEach(doc => {\n      result.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n    return {\n      success: true,\n      data: result\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// Check if user exists in database by email\nexport const checkUserExists = async email => {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'users'));\n    const users = [];\n    querySnapshot.forEach(doc => {\n      users.push({\n        id: doc.id,\n        ...doc.data()\n      });\n    });\n\n    // Find user by email\n    const user = users.find(user => user.email === email);\n    if (user) {\n      return {\n        success: true,\n        exists: true,\n        user: user\n      };\n    } else {\n      return {\n        success: true,\n        exists: false\n      };\n    }\n  } catch (error) {\n    console.error(\"Error checking user existence:\", error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["db","collection","addDoc","setDoc","doc","getDoc","getDocs","addData","collectionName","data","console","log","docRef","id","success","error","message","setData","docId","getData","docSnap","exists","getAllData","querySnapshot","result","forEach","push","checkUserExists","email","users","user","find"],"sources":["D:/CollegeFolder_B-TECH/Incuverse/src/pages/firestore.js"],"sourcesContent":["import { db } from \"../firebaseConfig\";\r\nimport { collection, addDoc, setDoc, doc, getDoc, getDocs } from \"firebase/firestore\";\r\n\r\nexport const addData = async (collectionName, data) => {\r\n    try {\r\n        console.log(\"Adding data to Firestore:\", data);\r\n        const docRef = await addDoc(collection(db, collectionName), data);\r\n        console.log(\"Document ID:\", docRef.id);\r\n        return { success: true, id: docRef.id };\r\n    } catch (error) {\r\n        console.error(\"Firestore error:\", error);\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\nexport const setData = async (collectionName, docId, data) => {\r\n    try {\r\n        await setDoc(doc(db, collectionName, docId), data);\r\n        return { success: true };\r\n    } catch (error) {\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\nexport const getData = async (collectionName, docId) => {\r\n    try {\r\n        const docRef = doc(db, collectionName, docId);\r\n        const docSnap = await getDoc(docRef);\r\n        if (docSnap.exists()) return { success: true, data: docSnap.data() };\r\n        else return { success: false, error: \"No such document!\" };\r\n    } catch (error) {\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\nexport const getAllData = async (collectionName) => {\r\n    try {\r\n        const querySnapshot = await getDocs(collection(db, collectionName));\r\n        const result = [];\r\n        querySnapshot.forEach((doc) => {\r\n            result.push({ id: doc.id, ...doc.data() });\r\n        });\r\n        return { success: true, data: result };\r\n    } catch (error) {\r\n        return { success: false, error: error.message };\r\n    }\r\n};\r\n\r\n// Check if user exists in database by email\r\nexport const checkUserExists = async (email) => {\r\n    try {\r\n        const querySnapshot = await getDocs(collection(db, 'users'));\r\n        const users = [];\r\n        querySnapshot.forEach((doc) => {\r\n            users.push({ id: doc.id, ...doc.data() });\r\n        });\r\n\r\n        // Find user by email\r\n        const user = users.find(user => user.email === email);\r\n\r\n        if (user) {\r\n            return { success: true, exists: true, user: user };\r\n        } else {\r\n            return { success: true, exists: false };\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error checking user existence:\", error);\r\n        return { success: false, error: error.message };\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}