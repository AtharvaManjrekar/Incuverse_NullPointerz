{"ast":null,"code":"// API service to connect React frontend to Python backend\nconst API_BASE_URL = 'http://localhost:8000';\nclass RetirementAPI {\n  // Health check\n  async checkHealth() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      return await response.json();\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        status: 'unhealthy',\n        error: error.message\n      };\n    }\n  }\n\n  // Analyze retirement readiness\n  async analyzeRetirement(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          age: userData.age,\n          retirement_age: userData.retirementAge,\n          annual_income: userData.monthlyIncome * 12,\n          monthly_expenses: userData.monthlyExpenses,\n          current_savings: userData.currentSavings,\n          monthly_savings: userData.monthlySavings,\n          retirement_goal: userData.retirementGoal,\n          expected_inflation: userData.expectedInflation || 3.0,\n          expected_returns: userData.expectedReturns || 6.0,\n          employer_match: userData.employerMatch || 0,\n          social_security_estimate: userData.socialSecurity || 0,\n          other_income: userData.otherIncome || 0\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Analysis failed:', error);\n      throw error;\n    }\n  }\n\n  // Get strategy suggestions\n  async getSuggestions(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/suggestions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          age: userData.age,\n          retirement_age: userData.retirementAge,\n          annual_income: userData.monthlyIncome * 12,\n          monthly_expenses: userData.monthlyExpenses,\n          current_savings: userData.currentSavings,\n          monthly_savings: userData.monthlySavings,\n          retirement_goal: userData.retirementGoal,\n          expected_inflation: userData.expectedInflation || 3.0,\n          expected_returns: userData.expectedReturns || 6.0,\n          employer_match: userData.employerMatch || 0,\n          social_security_estimate: userData.socialSecurity || 0,\n          other_income: userData.otherIncome || 0\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Suggestions failed:', error);\n      throw error;\n    }\n  }\n\n  // Run simulation\n  async runSimulation(userData, modifiedParams) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/simulate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_input: {\n            age: userData.age,\n            retirement_age: userData.retirementAge,\n            annual_income: userData.monthlyIncome * 12,\n            monthly_expenses: userData.monthlyExpenses,\n            current_savings: userData.currentSavings,\n            monthly_savings: userData.monthlySavings,\n            retirement_goal: userData.retirementGoal,\n            expected_inflation: userData.expectedInflation || 3.0,\n            expected_returns: userData.expectedReturns || 6.0,\n            employer_match: userData.employerMatch || 0,\n            social_security_estimate: userData.socialSecurity || 0,\n            other_income: userData.otherIncome || 0\n          },\n          modified_parameters: modifiedParams,\n          simulation_type: 'parameter_modification'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Simulation failed:', error);\n      throw error;\n    }\n  }\n}\nexport default new RetirementAPI();","map":{"version":3,"names":["API_BASE_URL","RetirementAPI","checkHealth","response","fetch","json","error","console","status","message","analyzeRetirement","userData","method","headers","body","JSON","stringify","age","retirement_age","retirementAge","annual_income","monthlyIncome","monthly_expenses","monthlyExpenses","current_savings","currentSavings","monthly_savings","monthlySavings","retirement_goal","retirementGoal","expected_inflation","expectedInflation","expected_returns","expectedReturns","employer_match","employerMatch","social_security_estimate","socialSecurity","other_income","otherIncome","ok","Error","getSuggestions","runSimulation","modifiedParams","user_input","modified_parameters","simulation_type"],"sources":["D:/CollegeFolder_B-TECH/Incuverse/src/services/api.js"],"sourcesContent":["// API service to connect React frontend to Python backend\r\nconst API_BASE_URL = 'http://localhost:8000';\r\n\r\nclass RetirementAPI {\r\n  // Health check\r\n  async checkHealth() {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/health`);\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Health check failed:', error);\r\n      return { status: 'unhealthy', error: error.message };\r\n    }\r\n  }\r\n\r\n  // Analyze retirement readiness\r\n  async analyzeRetirement(userData) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/analyze`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          age: userData.age,\r\n          retirement_age: userData.retirementAge,\r\n          annual_income: userData.monthlyIncome * 12,\r\n          monthly_expenses: userData.monthlyExpenses,\r\n          current_savings: userData.currentSavings,\r\n          monthly_savings: userData.monthlySavings,\r\n          retirement_goal: userData.retirementGoal,\r\n          expected_inflation: userData.expectedInflation || 3.0,\r\n          expected_returns: userData.expectedReturns || 6.0,\r\n          employer_match: userData.employerMatch || 0,\r\n          social_security_estimate: userData.socialSecurity || 0,\r\n          other_income: userData.otherIncome || 0\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Analysis failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get strategy suggestions\r\n  async getSuggestions(userData) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/suggestions`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          age: userData.age,\r\n          retirement_age: userData.retirementAge,\r\n          annual_income: userData.monthlyIncome * 12,\r\n          monthly_expenses: userData.monthlyExpenses,\r\n          current_savings: userData.currentSavings,\r\n          monthly_savings: userData.monthlySavings,\r\n          retirement_goal: userData.retirementGoal,\r\n          expected_inflation: userData.expectedInflation || 3.0,\r\n          expected_returns: userData.expectedReturns || 6.0,\r\n          employer_match: userData.employerMatch || 0,\r\n          social_security_estimate: userData.socialSecurity || 0,\r\n          other_income: userData.otherIncome || 0\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Suggestions failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Run simulation\r\n  async runSimulation(userData, modifiedParams) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/simulate`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          user_input: {\r\n            age: userData.age,\r\n            retirement_age: userData.retirementAge,\r\n            annual_income: userData.monthlyIncome * 12,\r\n            monthly_expenses: userData.monthlyExpenses,\r\n            current_savings: userData.currentSavings,\r\n            monthly_savings: userData.monthlySavings,\r\n            retirement_goal: userData.retirementGoal,\r\n            expected_inflation: userData.expectedInflation || 3.0,\r\n            expected_returns: userData.expectedReturns || 6.0,\r\n            employer_match: userData.employerMatch || 0,\r\n            social_security_estimate: userData.socialSecurity || 0,\r\n            other_income: userData.otherIncome || 0\r\n          },\r\n          modified_parameters: modifiedParams,\r\n          simulation_type: 'parameter_modification'\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Simulation failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new RetirementAPI();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}