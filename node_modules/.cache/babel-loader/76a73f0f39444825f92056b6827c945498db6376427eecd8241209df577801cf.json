{"ast":null,"code":"// Simple Firebase connection test\nimport { db } from './firebaseConfig';\nimport { collection, getDocs, addDoc } from 'firebase/firestore';\nexport const testFirebaseConnection = async () => {\n  try {\n    console.log('üîç Testing Firebase connection...');\n    console.log('üîç Database object:', db);\n\n    // Test 1: Try to read from users collection\n    console.log('üîç Test 1: Reading users collection...');\n    const usersCollection = collection(db, 'users');\n    console.log('üîç Users collection reference:', usersCollection);\n    const querySnapshot = await getDocs(usersCollection);\n    console.log('üîç Query snapshot size:', querySnapshot.size);\n    console.log('üîç Query snapshot empty:', querySnapshot.empty);\n    const users = [];\n    querySnapshot.forEach(doc => {\n      const userData = {\n        id: doc.id,\n        ...doc.data()\n      };\n      users.push(userData);\n      console.log('üîç User document:', userData);\n    });\n    console.log('üîç All users:', users);\n\n    // Test 2: Try to write a test document\n    console.log('üîç Test 2: Writing test document...');\n    const testData = {\n      test: true,\n      timestamp: new Date().toISOString(),\n      message: 'Firebase connection test'\n    };\n    const docRef = await addDoc(collection(db, 'test'), testData);\n    console.log('üîç Test document created with ID:', docRef.id);\n    return {\n      success: true,\n      usersCount: querySnapshot.size,\n      users: users,\n      testDocId: docRef.id\n    };\n  } catch (error) {\n    console.error('‚ùå Firebase connection test failed:', error);\n    console.error('‚ùå Error details:', {\n      code: error.code,\n      message: error.message,\n      stack: error.stack\n    });\n    return {\n      success: false,\n      error: error.message,\n      code: error.code\n    };\n  }\n};\n\n// Run the test if this file is imported\nif (typeof window !== 'undefined') {\n  testFirebaseConnection().then(result => {\n    console.log('üîç Firebase test result:', result);\n  });\n}","map":{"version":3,"names":["db","collection","getDocs","addDoc","testFirebaseConnection","console","log","usersCollection","querySnapshot","size","empty","users","forEach","doc","userData","id","data","push","testData","test","timestamp","Date","toISOString","message","docRef","success","usersCount","testDocId","error","code","stack","window","then","result"],"sources":["D:/CollegeFolder_B-TECH/Incuverse/src/test-firebase.js"],"sourcesContent":["// Simple Firebase connection test\r\nimport { db } from './firebaseConfig';\r\nimport { collection, getDocs, addDoc } from 'firebase/firestore';\r\n\r\nexport const testFirebaseConnection = async () => {\r\n    try {\r\n        console.log('üîç Testing Firebase connection...');\r\n        console.log('üîç Database object:', db);\r\n\r\n        // Test 1: Try to read from users collection\r\n        console.log('üîç Test 1: Reading users collection...');\r\n        const usersCollection = collection(db, 'users');\r\n        console.log('üîç Users collection reference:', usersCollection);\r\n\r\n        const querySnapshot = await getDocs(usersCollection);\r\n        console.log('üîç Query snapshot size:', querySnapshot.size);\r\n        console.log('üîç Query snapshot empty:', querySnapshot.empty);\r\n\r\n        const users = [];\r\n        querySnapshot.forEach((doc) => {\r\n            const userData = { id: doc.id, ...doc.data() };\r\n            users.push(userData);\r\n            console.log('üîç User document:', userData);\r\n        });\r\n\r\n        console.log('üîç All users:', users);\r\n\r\n        // Test 2: Try to write a test document\r\n        console.log('üîç Test 2: Writing test document...');\r\n        const testData = {\r\n            test: true,\r\n            timestamp: new Date().toISOString(),\r\n            message: 'Firebase connection test'\r\n        };\r\n\r\n        const docRef = await addDoc(collection(db, 'test'), testData);\r\n        console.log('üîç Test document created with ID:', docRef.id);\r\n\r\n        return {\r\n            success: true,\r\n            usersCount: querySnapshot.size,\r\n            users: users,\r\n            testDocId: docRef.id\r\n        };\r\n    } catch (error) {\r\n        console.error('‚ùå Firebase connection test failed:', error);\r\n        console.error('‚ùå Error details:', {\r\n            code: error.code,\r\n            message: error.message,\r\n            stack: error.stack\r\n        });\r\n        return {\r\n            success: false,\r\n            error: error.message,\r\n            code: error.code\r\n        };\r\n    }\r\n};\r\n\r\n// Run the test if this file is imported\r\nif (typeof window !== 'undefined') {\r\n    testFirebaseConnection().then(result => {\r\n        console.log('üîç Firebase test result:', result);\r\n    });\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAASC,UAAU,EAAEC,OAAO,EAAEC,MAAM,QAAQ,oBAAoB;AAEhE,OAAO,MAAMC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EAC9C,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChDD,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEN,EAAE,CAAC;;IAEtC;IACAK,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrD,MAAMC,eAAe,GAAGN,UAAU,CAACD,EAAE,EAAE,OAAO,CAAC;IAC/CK,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEC,eAAe,CAAC;IAE9D,MAAMC,aAAa,GAAG,MAAMN,OAAO,CAACK,eAAe,CAAC;IACpDF,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEE,aAAa,CAACC,IAAI,CAAC;IAC1DJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEE,aAAa,CAACE,KAAK,CAAC;IAE5D,MAAMC,KAAK,GAAG,EAAE;IAChBH,aAAa,CAACI,OAAO,CAAEC,GAAG,IAAK;MAC3B,MAAMC,QAAQ,GAAG;QAAEC,EAAE,EAAEF,GAAG,CAACE,EAAE;QAAE,GAAGF,GAAG,CAACG,IAAI,CAAC;MAAE,CAAC;MAC9CL,KAAK,CAACM,IAAI,CAACH,QAAQ,CAAC;MACpBT,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEQ,QAAQ,CAAC;IAC9C,CAAC,CAAC;IAEFT,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEK,KAAK,CAAC;;IAEnC;IACAN,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;IAClD,MAAMY,QAAQ,GAAG;MACbC,IAAI,EAAE,IAAI;MACVC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,OAAO,EAAE;IACb,CAAC;IAED,MAAMC,MAAM,GAAG,MAAMrB,MAAM,CAACF,UAAU,CAACD,EAAE,EAAE,MAAM,CAAC,EAAEkB,QAAQ,CAAC;IAC7Db,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEkB,MAAM,CAACT,EAAE,CAAC;IAE3D,OAAO;MACHU,OAAO,EAAE,IAAI;MACbC,UAAU,EAAElB,aAAa,CAACC,IAAI;MAC9BE,KAAK,EAAEA,KAAK;MACZgB,SAAS,EAAEH,MAAM,CAACT;IACtB,CAAC;EACL,CAAC,CAAC,OAAOa,KAAK,EAAE;IACZvB,OAAO,CAACuB,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1DvB,OAAO,CAACuB,KAAK,CAAC,kBAAkB,EAAE;MAC9BC,IAAI,EAAED,KAAK,CAACC,IAAI;MAChBN,OAAO,EAAEK,KAAK,CAACL,OAAO;MACtBO,KAAK,EAAEF,KAAK,CAACE;IACjB,CAAC,CAAC;IACF,OAAO;MACHL,OAAO,EAAE,KAAK;MACdG,KAAK,EAAEA,KAAK,CAACL,OAAO;MACpBM,IAAI,EAAED,KAAK,CAACC;IAChB,CAAC;EACL;AACJ,CAAC;;AAED;AACA,IAAI,OAAOE,MAAM,KAAK,WAAW,EAAE;EAC/B3B,sBAAsB,CAAC,CAAC,CAAC4B,IAAI,CAACC,MAAM,IAAI;IACpC5B,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE2B,MAAM,CAAC;EACnD,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}